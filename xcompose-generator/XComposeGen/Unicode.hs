module XComposeGen.Unicode (greek, symbols, subscripts, superscripts, disamb) where

import Data.Char (toUpper)
import Data.List (isPrefixOf)
import Control.Applicative



greek :: [(String, String)]
greek = [ (lead : short, unicode) | (short, unicode) <- greek' , lead <- ['*'] ]
    where greek' =
            [ ("a","Œ±"), ("b","Œ≤"), ("g","Œ≥"), ("G","Œì"), ("d","Œ¥"), ("D","Œî"), ("e","Œµ"), ("N","Œ∑")
            , ("E","Œ∑"), ("f","œÜ"), ("F","Œ¶"), ("i","Œπ"), ("k","Œ∫"), ("l","Œª"), ("L","Œõ"), ("m","Œº")
            , ("n","ŒΩ"), ("x","Œæ"), ("o","Œø"), ("p","œÄ"), ("P","Œ†"), ("r","œÅ"), ("s","œÉ"), ("S","Œ£")
            , ("q","œà"), ("Q","Œ®"), ("t","œÑ"), ("h","Œ∏"), ("T","Œò"), ("c","œá"), ("C","Œß"), ("w","œâ")
            , ("O","Œ©"), ("z","Œ∂") ]



symbols :: [(String, String)]
symbols = concat [custom, pars, accents, combining, mathbb, mathother, mathcal, circled, simple]


custom, pars, accents, combining, mathbb, mathcal, circled, simple :: [(String,String)]

custom = [ ("@u", "joaopizani"),  ("@m", "joaopizani@gmail.com") ]

pars = concat [map fst parPairs, map snd parPairs, map both parPairs]
    where
        both ((x, y), (_, z)) = ('s' : x, y ++ z)
        parPairs =
            [ p "<"  "‚ü®"    ">"  "‚ü©",     p "<<"  "‚ü™"   ">>"  "‚ü´",     p "|("   "„Äñ"    ")|"   "„Äó"
            , p "{|" "‚¶É"    "|}" "‚¶Ñ",     p "{{"  "‚¶É"   "}}"  "‚¶Ñ",     p "[["   "‚ü¶"    "]]"   "‚üß"
            , p "|_" "‚åä"    "_|" "‚åã",     p "r|_" "‚åà"   "r_|" "‚åâ",     p "rs|_" "‚åú"    "rs_|" "‚åù" ]
            where p x y z t = ((x, y), (z, t))

accents = concat
  [ f 'a' ('√°','√†','√¢','√§','√£','√•',' ','»ß'),     f 'b' (' ',' ',' ',' ',' ',' ',' ','·∏É')
  , f 'c' ('ƒá',' ','ƒâ',' ',' ',' ','√ß','ƒã'),     f 'd' (' ',' ',' ',' ',' ',' ',' ','·∏ã')
  , f 'e' ('√©','√®','√™','√´',' ',' ',' ','ƒó'),     f 'f' (' ',' ',' ',' ',' ',' ',' ','·∏ü')
  , f 'g' (' ',' ',' ',' ',' ',' ',' ','ƒ°'),     f 'i' ('√≠','√¨','√Æ','√Ø','ƒ©',' ',' ',' ')
  , f 'h' (' ',' ',' ',' ',' ',' ',' ','·∏£'),     f 'm' (' ',' ',' ',' ',' ',' ',' ','·πÅ')
  , f 'n' ('≈Ñ',' ',' ',' ','√±',' ',' ','·πÖ'),     f 'o' ('√≥','√≤','√¥','√∂','√µ',' ',' ','»Ø')
  , f 'p' (' ',' ',' ',' ',' ',' ',' ','·πó'),     f 'r' (' ',' ',' ',' ',' ',' ',' ','·πô')
  , f 's' (' ',' ',' ',' ',' ',' ',' ','·π°'),     f 't' (' ',' ',' ',' ',' ',' ',' ','·π´')
  , f 'u' ('√∫','√π','√ª','√º',' ',' ',' ',' '),     f 'w' (' ',' ',' ',' ',' ',' ',' ','·∫á')
  , f 'x' (' ',' ',' ',' ',' ',' ',' ','·∫ã'),     f 'y' ('√Ω',' ','≈∑','√ø',' ',' ',' ','·∫è')
  , f 'z' (' ',' ',' ',' ',' ',' ',' ','≈º') ]
  where
    f key (cute, grav, hat, diar, tild, ring, ced, dot) =
      concat [b '\'' cute, b '`' grav, b 'i' hat, b ';' diar, b '~' tild, b 'o' ring, b ',' ced, b '.' dot]
      where
        b p ac = if ac == ' ' then [] else [ ([p, key], [ac]),  ([p, toUpper key], [toUpper ac]) ]

combining = [ (lead : l, u) | lead <- ['0'], (l,u) <- combining' ]
    where combining' = [ ("'","ÃÅ"),  ("`","ÃÄ"),  ("i","ÃÇ"),  (";", "Ãà"),  ("~","ÃÉ"),  ("o","Ãä"),  (",","Ãß"),  (".","Ãá") ]

mathbb = [ (lead : l, u) | lead <- ['\\'], (l,u) <- mathbb' ]
    where mathbb' = [ ("e","ùîº"),  ("n","‚Ñï"),   ("h","‚Ñç"),   ("p", "‚Ñô"),   ("r","‚Ñù"),   ("c","‚ÑÇ")
                    , ("d","‚ÖÖ"),  ("q","‚Ñö"),   ("z","‚Ñ§"),   ("0", "ùüò"),   ("1","ùüô"),   ("2","ùüö")
                    , ("3","ùüõ"),  ("4","ùüú"),   ("5","ùüù"),   ("6", "ùüû"),   ("7","ùüü"),   ("8","ùü†")
                    , ("9","ùü°"),  ("b","ùîπ"),   ("w","ùïé"),   ("gG","‚Ñæ"),  ("gP","‚Ñø"),  ("gS","‚ÖÄ") ]

mathother = [ ("|c", "¬¢"), ("bc", "ùêú"), ("bC", "ùêÇ") ]

mathcal =
    [ ("cP","‚Ñò"), ("cL","‚Ñí"), ("cR","‚Ñõ")
    , ("cC","ùíû"), ("cD","ùíü")
    , ("cE","‚Ñ∞"), ("cF","‚Ñ±"), ("cH","‚Ñã"), ("cI","‚Ñê"), ("cM","‚Ñ≥"), ("ce","‚ÑØ"), ("cg","‚Ñä"), ("co","‚Ñ¥"), ("cl","‚Ñì") ]

circled =
    [ ("oo","¬∞"), ("o^","¬∞"), ("ob","‚óè"), ("op","‚àô"), ("ow","‚óã"), ("ov","‚éâ"), ("o..","‚óå"), ("oO","‚óØ")
    , c "+"  "‚äï",   c "-"  "‚äñ",   c "x"  "‚äó",   c "/"  "‚äò",   c "*"  "‚äõ",   c "="  "‚äú",   c "."  "‚äô"
    , c "()" "‚äö",   c "0"  "‚ì™",   c "1"  "‚ë†",   c "2"  "‚ë°",   c "3"  "‚ë¢",   c "4"  "‚ë£",   c "5"  "‚ë§"
    , c "6"  "‚ë•",   c "7"  "‚ë¶",   c "8"  "‚ëß",   c "9"  "‚ë®",   c "10" "‚ë©",   c "11" "‚ë™",   c "12" "‚ë´"
    , c "13" "‚ë¨",   c "14" "‚ë≠",   c "15" "‚ëÆ",   c "16" "‚ëØ",   c "17" "‚ë∞",   c "18" "‚ë±",   c "19" "‚ë≤"
    , c "20" "‚ë≥",   c "A"  "‚í∂",   c "B"  "‚í∑",   c "C"  "‚í∏",   c "D"  "‚íπ",   c "E"  "‚í∫",   c "F"  "‚íª"
    , c "G"  "‚íº",   c "H"  "‚íΩ",   c "I"  "‚íæ",   c "J"  "‚íø",   c "K"  "‚ìÄ",   c "L"  "‚ìÅ",   c "M"  "‚ìÇ"
    , c "N"  "‚ìÉ",   c "O"  "‚ìÑ",   c "P"  "‚ìÖ",   c "Q"  "‚ìÜ",   c "R"  "‚ìá",   c "S"  "‚ìà",   c "T"  "‚ìâ"
    , c "U"  "‚ìä",   c "V"  "‚ìã",   c "W"  "‚ìå",   c "X"  "‚ìç",   c "Y"  "‚ìé",   c "Z"  "‚ìè",   c "a"  "‚ìê"
    , c "b"  "‚ìë",   c "c"  "‚ìí",   c "d"  "‚ìì",   c "e"  "‚ìî",   c "f"  "‚ìï",   c "g"  "‚ìñ",   c "h"  "‚ìó"
    , c "i"  "‚ìò",   c "j"  "‚ìô",   c "k"  "‚ìö",   c "l"  "‚ìõ",   c "m"  "‚ìú",   c "n"  "‚ìù",   c "o"  "‚ìû"
    , c "p"  "‚ìü",   c "q"  "‚ì†",   c "r"  "‚ì°",   c "s"  "‚ì¢",   c "t"  "‚ì£",   c "u"  "‚ì§",   c "v"  "‚ì•"
    , c "w"  "‚ì¶",   c "x"  "‚ìß",   c "y"  "‚ì®",   c "z"  "‚ì©" ]
    where c x y = ("(" ++ x ++ ")", y)


simple = concat [quant, op, arrows, rels, eqs, misc, curr, turns, squar, punct, dash, quots, nord]

quant, op, arrows, rels, eqs, misc, curr, turns, squar, punct, dash, quots, nord :: [(String,String)]

quant =
    [ ("FA", "‚àÄ"),   ("EX", "‚àÉ"),   ("rA", "‚àÄ"),   ("rE", "‚àÉ"),   ("/rE", "‚àÑ"),  ("r/E", "‚àÑ")
    , ("na", "‚àá"),   ("rgD", "‚àá"),  ("r'D", "‚àá"),  ("sum", "‚àë") ]

op =
    [ ("<|", "‚óÅ"),  ("|>", "‚ñ∑"),   ("b|>", "‚ñ∏"),   ("><", "‚ãà"),   ("<)", "‚óÖ"),   ("(>", "‚ñª")
    , ("v", "‚à®"),   ("u", "‚à™"),    ("n", "‚à©"),     ("V", "‚ãÅ"),    ("+-", "¬±"),   ("+u", "‚äé")
    , ("u+", "‚äé"),  ("u[]", "‚äî"),  ("n[]", "‚äì"),   ("^", "‚àß")
    , ("o", "‚àò"),   (".", "¬∑"),    ("...", "‚Ä¶"),   ("c...", "‚ãØ"), ("v...", "‚ãÆ"), ("x","√ó")
    , ("neg", "¬¨"), ("-.", "‚à∏"),   ("-:", "√∑"),    ("sqrt", "‚àö"), ("cbrt", "‚àõ"), ("<w>", "‚óá")
    , ("<b>", "‚óà") ]

arrows =
    [ ("<-","‚Üê"),   ("->","‚Üí"),   ("|->","‚Ü¶"),  ("<-|","‚Ü§"),   ("<--","‚üµ"),  ("-->","‚ü∂")
    , ("|-->","‚üº"), ("o->","‚á¥"),  ("|^","‚Üë"),   ("|v","‚Üì"),    ("|vv","‚Ü°"),  ("|^^","‚Üü")
    , ("||^","‚áë"),  ("||v","‚áì"),  ("==>","‚üπ"),  ("=>","‚áí"),    ("<=","‚áê"),   ("<=>","‚áî")
    , ("|=>","‚á®"),  ("<=|","‚á¶"),  ("~>","‚Üù"),   ("<~","‚Üú"),    ("~->","‚áù"),  ("<-~","‚áú")
    , ("<-<","‚Ü¢"),  (">->","‚Ü£"),  ("<->","‚Üî"),  ("<|-|>","‚áø"), ("-|>","‚áæ"),  ("|<-","‚á§")
    , ("->|","‚á•"),  (">>=","‚Ü†"),  ("->>","‚Ü†"),  ("/-","‚Üº"),    ("\\-","‚ÜΩ"),  ("-/","‚áÅ")
    , ("-\\","‚áÄ"),  ("-|->","‚á∏"), ("c->","‚Ü™"),  ("rc->","‚Ü©"),  ("/v","‚ÜØ"),   ("u^","‚Ü∫")
    , ("->->","‚áâ"), ("2->","‚áâ"),  ("<-<-","‚áá"), ("-><-","‚áÑ"),  ("<-->","‚áÜ"), ("3->","‚á∂")
    , ("\\/","‚§®"), ("/\\","‚§™") ]

rels =
    [ ("c=","‚äÜ"),    ("/c=","‚äà"),   ("c","‚äÇ"),     ("/c","‚äÑ"),     ("c-","‚àà"),     ("/c-","‚àâ")
    , ("c/=","‚ää"),   ("rc=","‚äá"),   ("rc","‚äÉ"),    ("rc-","‚àã"),    ("r/c-","‚àå"),   ("rc/=","‚äã")
    , (">=","‚â•"),    ("=<","‚â§"),    ("/>=","‚â±"),   ("/=<","‚â∞"),    ("c[]","‚äè"),    ("rc[]","‚äê")
    , ("c[]=","‚äë"),  ("rc[]=","‚äí"), ("/c[]=","‚ã¢"), ("/rc[]=","‚ã£"), ("c[]/=","‚ã§"),  ("rc[]/=","‚ã•") ]

eqs =
    [ ("=def","‚âù"),   ("=?","‚âü"),    ("=o","‚âó"),    ("==","‚â°"),    ("===","‚â£"),  ("~~","‚âà")
    , ("/~~","‚ââ"),    ("/~=","‚âá"),   ("~~-","‚âä"),   ("~~~","‚âã"),   ("~-","‚âÉ"),   ("~=","‚âÖ")
    , ("~","‚àº"),      ("/=","‚â†"),    ("/==","‚â¢"),   (":=","‚âî"),    ("=:","‚âï") ]

misc =
    [ ("Bot","‚ä•"),  ("Top","‚ä§"),  ("||","‚à•"),   ("l","‚Ñì"),    ("99","¬´"),   ("00","¬ª"),  ("90","¬´¬ª")
    , ("  ","¬†"),   (" .","‚Äà"),   ("::","‚à∑"),   (":","‚à∂"),    ("r;","‚Åè"),   ("0","‚àÖ"),   ("r8","‚àû")
    , ("*","‚òÖ"),    ("/'l","∆õ"),  ("d","‚àÇ"),    ("#b","‚ô≠"),   ("#f","‚ôÆ"),   ("##","‚ôØ"),  ("Hot","‚ô®")
    , ("Cut","‚úÇ"),  ("Pen","‚úé"),  ("Tick","‚úì"), ("dag","‚Ä†"),  ("mic","¬µ"),  ("os","¬ß"),  ("so","¬ß")
    , ("PP","¬∂"),   ("CCCP","‚ò≠"), ("ck","‚å•"),   (":)","‚ò∫"),   (":(","‚òπ"),   ("<3","‚ô•"),  ("sp","‚ô†")
    , ("Sp","‚ô†"),   ("di","‚ô¶"),   ("Di","‚ô¶"),   ("<>","‚ô¶"),   ("Cl","‚ô£"),   ("d1","‚öÄ"),  ("d2","‚öÅ")
    , ("d3","‚öÇ"),   ("d4","‚öÉ"),   ("d5","‚öÑ"),   ("d6","‚öÖ"),   ("tm","‚Ñ¢"),   ("Ro","‚úä"),  ("Pa","‚úã")
    , ("Sc","‚úå"),   ("rt"," á"),   ("rh","…•"),   ("re","«ù"),   ("ra","…ê"),   ("oe","≈ì"),  ("OE","≈í")
    , ("ae","√¶"),   ("AE","√Ü") ]

curr  = [ ("B|","‡∏ø"), ("e=","‚Ç¨"), ("L-","¬£"), ("Y=","¬•"), ("x.","¬§") ]
turns = [ ("|-","‚ä¢"), ("|/-","‚ä¨"), ("-|","‚ä£"), ("|=","‚ä®"), ("|/=","‚ä≠"), ("||-","‚ä©"), ("|||-","‚ä™") ]
squar = [ ("[+]","‚äû"), ("[-]","‚äü"), ("[x]","‚ä†"), ("[.]","‚ä°"), ("[]","‚àé"), ("[ ]","‚òê"), ("[T]","‚òë") ]
punct = [ ("!!","‚Äº"), ("??","‚Åá"), ("?!","‚Åà"), ("?b!","‚ÄΩ"), ("!?","‚Åâ"), ("r?","¬ø"), ("r!","¬°"), ("''","‚Ä≤") ]
dash  = [ ("-","‚àí") , ("--","‚Äì"), ("---","‚Äî") ]
quots = [ ("\"","‚Äú‚Äù"), ("r`","‚Ä≤") ]
nord  = [ ("eth","√∞"), ("/o","√∏"), ("/O","√ò") ]




zipscripts :: Char -> String -> String -> [(String, String)]
zipscripts c ascii unicode = zip (fmap ((c:) . pure) ascii) (fmap pure unicode)

-- "‚Çï‚Çñ‚Çó‚Çò‚Çô‚Çö‚Çõ‚Çú" http://hackage.haskell.org/trac/ghc/ticket/5519
subscripts :: [(String, String)]
subscripts = zipscripts '_' ("0123456789+-=()aeioruvx"++"hklmnpst")
                            ("‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Çä‚Çã‚Çå‚Çç‚Çé‚Çê‚Çë·µ¢‚Çí·µ£·µ§·µ•‚Çì"++ hklmnpst )
    where hklmnpst = "\8341\8342\8343\8344\8345\8346\8347\8348"

-- NOTE that qCFQSVXYZ are missing
superscripts :: [(String, String)]
superscripts = zipscripts '^'
  "0123456789+-=()abcdefghijklmnoprstuvwxyzABDEGHIJKLMNOPRTUW"
  "‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ‚Å∫‚Åª‚Åº‚ÅΩ‚Åæ·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞‚Å± ≤·µèÀ°·µê‚Åø·µí·µñ ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª·¥¨·¥Æ·¥∞·¥±·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æ·¥ø·µÄ·µÅ·µÇ"



disamb :: [(String, String)] -> [(String, String)]
disamb table = concatMap f table
    where f e@(k, v) = if null ambs then [e] else [(k ++ " ", v), (k ++ "\t", v)]
              where ambs = [ e2 | e2@(k2, _) <- table,  e /= e2, k `isPrefixOf` k2 ]



{-
   ‚à£  ‚ãÜ  ‚Å∫   ‚Åª  ‚Ä¢  ‚ú∂  ‚â∫  ‚Ä≥  ‚â≥  ‚â≤  ‚óÅ  ‚àó  ‚â∞  ‚Äø  ‚ä¥  ‚âÆ  ‚ñ°  ‚áõ   ‚ä∏  ‚âØ
   ‚Üõ  ‚ãê  ‚ÅÜ  ‚ÅÖ  œï  ‚óÇ  ‚â¥  ‚âÅ  ‚ëµ  ‚ë¥   ÃÇ  ‚âª  ‚ñ∫  ‚àî  ‚ñ∂  ‚âõ  ‚¶à  ‚¶á  ‚ë∂
   ‚ãÉ   ‚ãÇ   ‚âµ   ¬Ω  ‚Äô ‚Äî  ‚àÅ  Œú  ƒ±

CE "‚Ç†" # EURO-CURRENCY SIGN
C/ "‚Ç°" # COLON SIGN
/C "‚Ç°" # COLON SIGN
Cr "‚Ç¢" # CRUZEIRO SIGN
Fr "‚Ç£" # FRENCH FRANC SIGN
L= "‚Ç§" # LIRA SIGN
=L "‚Ç§" # LIRA SIGN
m/ "‚Ç•" # MILL SIGN
/m "‚Ç•" # MILL SIGN
N= "‚Ç¶" # NAIRA SIGN
=N "‚Ç¶" # NAIRA SIGN
Pt "‚Çß" # PESETA SIGN
Rs "‚Ç®" # RUPEE SIGN
W= "‚Ç©" # WON SIGN
=W "‚Ç©" # WON SIGN
   "‚Ç™" # NEW SHEQEL SIGN
d- "‚Ç´" # DONG SIGN
   "‚Ç≠" # KIP SIGN
   "‚ÇÆ" # TUGRIK SIGN
   "‚ÇØ" # DRACHMA SIGN
   "‚Ç∞" # GERMAN PENNY SIGN
   "‚Ç±" # PESO SIGN
   "‚Ç≤" # GUARANI SIGN
   "‚Ç≥" # AUSTRAL SIGN
   "‚Ç¥" # HRYVNIA SIGN
   "‚Çµ" # CEDI SIGN
|c "¬¢" # CENT SIGN
c/ "¬¢" # CENT SIGN
/c "¬¢" # CENT SIGN
-}

